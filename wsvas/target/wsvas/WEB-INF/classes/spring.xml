<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation=" 
          http://www.springframework.org/schema/beans 
          http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
          http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context-3.2.xsd
          http://www.springframework.org/schema/tx
          http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
	
	<!-- 引入属性文件 -->
	<!-- classpath 用以指定资源文件的根目录是类路径 -->
	<context:property-placeholder location="classpath:jdbc.properties,classpath:wsvas.properties" />
	
	<!-- dbcp数据库连接池配置 -->
	<bean id="dataSource" name="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}" />
		<!-- 同一时间可以从池分配的最多连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 最大空闲连接 -->
		<property name="maxIdle" value="10" />
		<!-- 在抛出异常之前，池等待连接被回收的最长时间（当没有可用连接时） -->
		<property name="maxWait" value="1000" />
		<property name="testOnBorrow" value="true" />
		<property name="validationQuery" value=" select count(*) from dual "/>
	</bean>

    <!-- 遍历应用工作空间的 @Service，并注入为Bean -->
    <context:component-scan base-package="com.chinanetcenter">
        <context:exclude-filter type="regex" expression="com.chinanetcenter.framework.*" />
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>
    
    <!-- 发送邮件 start -->
	<!-- 邮件发送器 -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<!-- 邮件发送服务器 -->
		<property name="host" value="${mail.smtp.host}"/>
		<!-- 端口，默认为25 -->
		<property name="port" value="${mail.smtp.port}" />
		<!-- 发送方邮件地址 -->
		<property name="username" value="${mail.smtp.username}" />
		<!-- 发送方邮件密码 -->
		<property name="password" value="${mail.smtp.password}" />
		<!-- 获得邮件会话属性,验证登录邮件服务器是否成功 -->
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">${mail.smtp.auth}</prop>
				<prop key="mail.smtp.timeout">${mail.smtp.timeout}</prop>
			</props>
		</property>
	</bean>
	
	<!-- 发送邮件 end -->

	<!-- mybatis 配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:/mybatis-config.xml" />
		<property name="dataSource" ref="dataSource"/>
		<property name="mapperLocations">
			<list>
				<!-- 读取所有mybatis的sql配置 -->
				<value>classpath:/com/chinanetcenter/**/*Mapper.xml</value>
			</list>
		</property>
		<property name="plugins" ref="paginationInterceptor"/>
	</bean>
	
	<!-- 分页拦截器Bean -->
	<bean id="paginationInterceptor" class="com.chinanetcenter.framework.mybatis.PaginationInterceptor"/>
	
	
	<!-- 事务配置 -->
	<bean id="transactionManager" name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

    <!-- BaseDao注入 -->
   	<bean id="BaseDao" class="com.chinanetcenter.framework.base.BaseDao">
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</bean>

    <!-- 自动扫描 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.chinanetcenter"/>
        <property name="markerInterface" value="com.chinanetcenter.framework.mybatis.mapper.SqlMapper"/>
    </bean>


    <!-- 开启注解配置 -->
    <context:annotation-config />

	<!-- @Transactional模式 -->
	<!-- 配置注解式的事物控制 -->
  	 <tx:annotation-driven transaction-manager="txManager"/>

  	<!-- 数据库事物管理 -->
  	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  		<property name="dataSource" ref="dataSource"/>
  	</bean>
</beans>